---
layout: post
title: "Sass CSS"
date:       2018-12-22 00:30:00 +0000
permalink:  sass
excerpt: "It's easy to use bootstrap or handcode css when quickly putting together a new project. As full stack developers, we need to give more love to our css! Let's talk about my favorite way: Sass"
---
 
It's easy to use bootstrap or handcode css when quickly putting together a new project. As full stack developers, we need to give more love to our css! Let's talk about my favorite way: Sass

So, what is Sass?  
Sass is a css 'extension' that extends how developers can write css code. I presume anyone reading this is familiar with html, css, and at least one traditional coding language: Ruby, Javascript, Python, C, Java, etc. Now, imagine writing css code in a manner akin to the way we write Javascript. Sass extends the functionality of having variables, logic gates, and similar core concepts in programming to traditional css. It's cool stuff!

In fact, not only is Sass pretty cool, it's actually kind of a huge 'thing'. Ever heard of Compass, Bourbon, or Susy frameworks? Yea, Sass helped make those. If one navigates to the Sass webpage, you'd find 3 different language iterations to choose amongst:  
1. Dart Sass
2. LibSass 
3. RubySass.  

Dart is the flagship integration, which compiles into javascript and gets updates first. This can be installed via command line or as an NPM package. LibSass, was written as a port from their ruby version. LibSass is a C/C++ driven iteration, but leverages a wrapper class to bring it portability...in other words, it's a library that can be wrapped by different languages for use within said language environments.  
Which makes sense when we talk about the third version: RubySass. RubySass is the original implementation of Sass. The first time I was exposed to Sass, it was RubySass. RubySass is deprecated since it will be phased out at the 1-year release anniversary of Dart. So, if this is your first exposure: use DartSass instructions, most likely.

Alright, let's get to the fun stuff. Step 1, install options. I'd go into this, but the reality is that using the simple and effective official guide is best. The two primary options are using a program to help you leverage Sass, or to use the command line. Here is a link: [Install Sass](https://sass-lang.com/install).

How does it work?  
Preprocessing .scss files into .css files, Sass allows you to use the features (down below) native to Sass and converts them into vanilla/web friendly css files. That's the basic magic. See the install guide and their official sources on how to do so, but it's very easy to accomplish. Pro-top: use the --watch command to automatically update css files while you actively alter a scss file. It's a small amount of setup and makes transitioning to sass simple and easy! 

What can Sass do?  (examples)

*1.* Variables: Instead of typing and remembering color schemes or values multiple times, use a variable so you can drop in something like $primary-background instead of manually inputting 'background-color: #ccc' everytime you want the site's main color drop.

~~~
$font-stack:    Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
~~~

*2.* Nesting: Tired of pre-pending ul to every child element selector? Then, nest those children! Instead of writing:

~~~
ul {}
ul li {}
ul a {}
~~~
Write this, with sass, instead: 
~~~
nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li { display: inline-block; }

  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}
~~~

*3.* Modularize: Leverage Sass's features of Partials, Imports, and Mixins! This allows us to import partials and add 'method'-like functionality to css. See the examples below, which I've lightly altered from the official docs.

~~~
// Reset file 
html {
  margin: 0;
  padding: 0;
}

// Separate File: 
@import 'reset';

body {
  font: 100% Helvetica, sans-serif;
  background-color: #efefef;
}

// Mixin example
@mixin transform($property) {
  -webkit-transform: $property;
  -ms-transform: $property;
  transform: $property;
}

.box { @include transform(rotate(30deg)); }
~~~

*4.* Extend and Inherit: similar to how we modularize our css, but the example is a bit longer so I (and the source docs) separated the two.
~~~
/* This CSS will print because %message-shared is extended. */
%message-shared {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

// This CSS won't print because %equal-heights is never extended.
%equal-heights {
  display: flex;
  flex-wrap: wrap;
}

.message {
  @extend %message-shared;
}

.success {
  @extend %message-shared;
  border-color: green;
}

.error {
  @extend %message-shared;
  border-color: red;
}

.warning {
  @extend %message-shared;
  border-color: yellow;
}
~~~

*5.* Logic / Operator: This part is my second favorite feature (second to variables) that Sass offers. We canz haz math? Pls+Ty. The example provided is something most devs either pull out calculator or do some fancy css footwork for. Why? Sass let's you keep it simple, reduces potential human errors, and is more readable in my opinion...what if another coder came in after you and has no idea where you got your px sizes from? Wonder no longer!
~~~
.container {
  width: 100%;
}

article[role="main"] {
  float: left;
  width: 600px / 960px * 100%;
}

aside[role="complementary"] {
  float: right;
  width: 300px / 960px * 100%;
}
~~~

The documentation and presentation of Sass is done wonderfully on their main webpage: [Sass](https://sass-lang.com/). I've provided the basic examples they highlight to stress the power and efficiency of using Sass. That said, I encourage readers to check out their documenation. It's a wonderful technology that provides pre-processing and more traditional code language features to Css, which is notoriously 'against the grain' when it comes to computer code. 

I hope readers will consider making the very minimal investment of trying out Sass. It is similar to Less, and with knowledge of it one can really do some magic. The dividends truly behin to pay off when dealing with production scale environments and in team environments. Be a polite coder: someone (maybe future self) will eventually have to come behind you and change things. Make that process a cinch by using a pre-processor. Obviously, I recommend Sass ;)

Btw, if you learn Sass, you'll be able to more easily alter some custom Bootstrap code, since Bootstrap uses such pre-processors!

As always, 

~ Coffee and Code on ~