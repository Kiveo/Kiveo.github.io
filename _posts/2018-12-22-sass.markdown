---
layout: post
title: "Sass CSS"
date:       2018-12-22 00:30:00 +0000
permalink:  sass
excerpt: "It's easy to use bootstrap or handcode css when quickly putting together a new project. As full stack developers, we need to give more love to our css! Let's talk about my favorite way: Sass"
---
 
It's easy to use bootstrap or handcode css when quickly putting together a new project. As full stack developers, we need to give more love to our css! Let's talk about my favorite way: Sass

So, what is Sass?  
Sass is a css 'extension' that extends how developers can write css code. I presume anyone reading this is familiar with html, css, and at least one traditional coding language: Ruby, Javascript, Python, C, Java, etc. Now, imagine writing css code in a manner akin to the way we write Javascript. Sass extends the functionality of having variables, logic gates, and similar core concepts in programming to traditional css. It's cool stuff!

In fact, not only is Sass pretty cool, it's actually kind of a huge 'thing'. Ever heard of Compass, Bourbon, or Susy frameworks? Yea, Sass helped make those. If one navigates to the Sass webpage, you'd find 3 different language iterations to choose amongst:  
1. Dart Sass
2. LibSass 
3. RubySass.  

Dart is the flagship integration, which compiles into javascript and gets updates first. This can be installed via command line or as an NPM package. LibSass, was written as a port from their ruby version. LibSass is a C/C++ driven iteration, but leverages a wrapper class to bring it portability...in other words, it's a library that can be wrapped by different languages for use within said language environments.  
Which makes sense when we talk about the third version: RubySass. RubySass is the original implementation of Sass. The first time I was exposed to Sass, it was RubySass. RubySass is deprecated since it will be phased out at the 1-year release anniversary of Dart. So, if this is your first exposure: use DartSass instructions, most likely.

